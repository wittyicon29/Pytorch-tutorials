# -*- coding: utf-8 -*-
"""RL tutorial PyTorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RI4zGFGQHi1il2nc5MSkspSVGsyrM5Dn
"""

!pip install gym torch torchvision

import torch
import torch.nn as nn
import gym
from torch.distributions import Categorical

# Define the policy network
class PolicyNetwork(torch.nn.Module):
    def __init__(self, input_dim, output_dim):
        super(PolicyNetwork, self).__init__()
        self.fc = torch.nn.Linear(input_dim, output_dim)

    def forward(self, x):
        x = self.fc(x)
        return torch.softmax(x, dim=-1)

# Function to collect trajectory
def collect_trajectory(env, policy_net, max_steps):
    states = []
    actions = []
    rewards = []
    advantages = []

    state = env.reset()
    done = False
    total_reward = 0
    step = 0

    while not done and step < max_steps:
        states.append(state)

        action_probs = policy_net(torch.Tensor(state))
        action_dist = Categorical(action_probs)
        action = action_dist.sample()
        actions.append(action)

        next_state, reward, done, _ = env.step(action.item())

        rewards.append(reward)

        state = next_state
        total_reward += reward
        step += 1

    # Compute advantages based on rewards
    returns = []
    advantages = []
    discounted_reward = 0
    for reward in reversed(rewards):
        discounted_reward = reward + gamma * discounted_reward
        returns.insert(0, discounted_reward)

    mean_return = torch.mean(torch.Tensor(returns))
    std_return = torch.std(torch.Tensor(returns))

    for return_ in returns:
        advantage = (return_ - mean_return) / std_return
        advantages.append(advantage)

    trajectory = {
        'states': states,
        'actions': actions,
        'rewards': rewards,
        'advantages': advantages
    }

    return trajectory, total_reward

# Function to update the policy network using TRPO
def update_policy(trajectory):
    states = torch.Tensor(trajectory['states'])
    actions = torch.Tensor(trajectory['actions'])
    advantages = torch.Tensor(trajectory['advantages'])

    old_logits = policy_net(states).detach()

    optimizer.zero_grad()
    logits = policy_net(states)
    dist = Categorical(logits=logits)
    log_prob = dist.log_prob(actions)
    ratio = torch.exp(log_prob - old_logits.unsqueeze(-1))

    surrogate_obj = torch.min(ratio * advantages, torch.clamp(ratio, 1 - epsilon, 1 + epsilon) * advantages)
    policy_loss = -torch.mean(surrogate_obj)

    policy_loss.backward()
    optimizer.step()



# Set up environment and policy network
env = gym.make('CartPole-v1')
state_dim = env.observation_space.shape[0]
action_dim = env.action_space.n

policy_net = PolicyNetwork(state_dim, action_dim)
optimizer = torch.optim.Adam(policy_net.parameters(), lr=0.01)

# Hyperparameters
max_episodes = 1000
max_steps = 200
gamma = 0.99
epsilon = 0.2

# Training loop
for episode in range(max_episodes):
    trajectory, total_reward = collect_trajectory(env, policy_net, max_steps)
    update_policy(trajectory)

    if episode % 10 == 0:
        print(f"Episode {episode}, Total Reward: {total_reward}")
